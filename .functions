#!/usr/bin/env bash

# shellcheck disable=SC2230
# shellcheck disable=SC2155

alias cls='clear && echo -en "\e[3J"'

export TMPDIR="${TMPDIR:-/tmp}"


# Utility function to check if $1 command exists
# Use example: if exists ls; then echo "Command exists."; else echo "Command does not exist."; fi
exists() {
	cmnd=${1:?"Please supply a command to look for."}
	# shellcheck disable=2015
	command -v "$cmnd" >/dev/null 2>&1 && { return 0; } || { return 1; }
}

title() {
	print -Pn "\e]0;$1\a"
}

randomWallpaper() {
	cd ~/wallpapers || exit 1
	# shellcheck disable=2207
	wallpapers=($(find "$PWD" -type f -exec file {} \; | awk -F: '{ if ($2 ~/[Ii]mage|EPS/) print "$1"}' ))
	rnd="$(shuf -i1-6000 -n1)"
	index=$($rnd % ${#wallpapers[@]} )
	wallpaper="${wallpapers[$index]}"
	echo "${wallpaper}"
}

setWallpaper() {
	wallpaper_file="$1"
	wallpaper_file2="$2"

	if [ "$wallpaper_file" != '' ] && [ ! -f "$wallpaper_file" ]; then
			echo "wallpaper '$wallpaper_file' does not exists!"
			return
	elif [ "$wallpaper_file" != '' ] && [ -f "$wallpaper_file" ]; then
			rm ~/.wallpaper 2>/dev/null
			ln -s "$wallpaper_file" ~/.wallpaper
	fi


	if [ "$wallpaper_file2" != '' ] && [ ! -f "$wallpaper_file2" ]; then
			echo "wallpaper_file2 '$wallpaper_file2' does not exists!"
			return
	elif [ "$wallpaper_file2" != '' ] && [ -f "$wallpaper_file2" ]; then
			rm ~/.wallpaper2 2>/dev/null
			ln -s "$wallpaper_file2" ~/.wallpaper2
	fi

	if [ -f "$HOME/.wallpaper" ]; then
			feh --bg-fill ~/.wallpaper --bg-fill ~/.wallpaper2
	else
			setRandomWallpaper
	fi
}

setRandomWallpaper() {
	# Without the echo $RANDOM, result is always the same...
	echo $RANDOM
	wallpaper="$(randomWallpaper)"
	echo "Setting wallpaper to ${wallpaper}"
	setWallpaper "$wallpaper"
}

detect_os() {
	## OS and Architecture
	if [ -f /etc/os-release ]; then
			# freedesktop.org and systemd
			. /etc/os-release
			OS="$NAME"
			VER="$VERSION_ID"
	elif type lsb_release >/dev/null 2>&1; then
			# linuxbase.org
			OS=$(lsb_release -si)
			VER=$(lsb_release -sr)
	elif [ -f /etc/lsb-release ]; then
			# For some versions of Debian/Ubuntu without lsb_release command
			. /etc/lsb-release
			OS=$DISTRIB_ID
			VER=$DISTRIB_RELEASE
	elif [ -f /etc/debian_version ]; then
			# Older Debian/Ubuntu/etc.
			OS=Debian
			VER=$(cat /etc/debian_version)
	elif [ -f /etc/SuSe-release ]; then
			# Older SuSE/etc.
			...
	elif [ -f /etc/redhat-release ]; then
			# Older Red Hat, CentOS, etc.
			...
	else
			# Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
			OS="$(uname -s)"
			VER="$(uname -r)"
	fi
	export OS
	export VER
}


# @see https://github.com/kepkin/dev-shell-essentials/blob/master/highlight.sh
highlight() {
	declare -A fg_color_map
	fg_color_map[black]=30
	fg_color_map[red]=31
	fg_color_map[green]=32
	fg_color_map[yellow]=33
	fg_color_map[blue]=34
	fg_color_map[magenta]=35
	fg_color_map[cyan]=36

	fg_c=$(echo -e "\e[1;${fg_color_map[$1]}m")
	c_rs=$'\e[0m'
	sed -u s"/$2/$fg_c\0$c_rs/g"
}




histcmd() {
		fc -l 1 | awk '{line=$1; $1=""; CMD_LINE[$0]=line; CMD[$0]++;count++; for (a in CMD)print CMD[a] " " CMD_LINE[a] " " a;}' | sort -rn
}


r(){
	# shellcheck source=.zshrc
	source "$HOME/.zshrc"
}


function validate-yml()
{
	#!/bin/bash

	#
	# Efstathios Xagoraris <sxagoraris@gmail.com>
	# Validate YAML files using ruby
	#


	if [ $# -eq 0 ]
		then
		echo "Please provide a yaml file as argument eg $0 file.yaml"
		exit 1
	fi

	ruby -ryaml -e "YAML.parse(File.open('${1}'))"

	if ! ruby -ryaml -e "YAML.parse(File.open('${1}'))" &>dev/null
		then
		echo "$1 is not valid YAML"
		else
		echo "$1 is a valid YAML"
	fi
}

current_tmux_window() {
	display_time=$(tmux show-options -g display-time | grep -o '[0-9]*')

	tmux set-option -g display-time 1
	tmux display-message
	tmux set-option -g display-time "$display_time"

	export TMUX_WINDOW
	TMUX_WINDOW="$(tmux show-messages | tail -1 | grep -o 'current pane \([0-9]\)' | grep -o '[0-9]*')"
	echo "$TMUX_WINDOW"
}

notify-on-error() {
	tmp_file"=$(mktemp)"
	ARGS="$*"
	# shellcheck disable=2086
	eval $ARGS 2> "$tmp_file"
	result=$?

	if [[ $result -ne 0 ]]; then
			error_content="$(cat "$tmp_file")"
			echo "$error_content"
			notify-send -u critical -i status/important "Command failed!" "$ARGS\n$error_content"
	fi
}

notify-finished() {
	ARGS="$*"
	result="$?"
	notify-on-error "$ARGS"
	if [ $result -eq 0 ]; then
		notify-send "Command Finished!" "$ARGS"
	fi
}

ip_address() {
	ip route get 1 | awk '{print $7;exit}'
}

write_apm_to_file() {
	apm list --installed --bare | grep -o '.*@' | sed 's/@$//g'	> ~/dotfiles/apm-packages.txt
}

install_apm_packages() {
	apm install --packages-file ~/dotfiles/apm-packages.txt
}





### Functions used in link.sh

function installZshPlugin() {
	pluginUrl="$1"
	pluginDir="$2"

	if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/$pluginDir" ]; then
		echo "Installing ZSH plugin '$pluginDir'"
		git clone -q "$pluginUrl" ~/.oh-my-zsh/custom/plugins/"$pluginDir"
	else
		echo "ZSH plugin '$pluginDir' is already installed"
	fi

}


function installZshTheme() {
	pluginUrl="$1"
	pluginDir="$2"

	if [ ! -f "$HOME/.oh-my-zsh/custom/themes/$pluginDir" ]; then
		echo "Installing ZSH theme '$pluginDir'"
		mkdir -p ~/.oh-my-zsh/custom/themes/
		cd	~/.oh-my-zsh/custom/themes/ || exit 1
		curl -fLo "$pluginDir" "$pluginUrl"
	else
		echo "ZSH theme '$pluginDir' is already installed"
	fi

}

export fontsAdded=0
function installFont() {
	fontUrl="$1"
	fontName="$2"
	if [ "$(uname)" = 'Darwin' ]; then
		mkdir -p ~/Library/Fonts
		cd ~/Library/Fonts || exit 1
	else
		mkdir -p ~/.local/share/fonts
		cd ~/.local/share/fonts || exit 1
	fi

	if [ ! -f "$fontName" ]; then
		curl -fLo "$fontName" "$fontUrl"
		fontsAdded=1
		deleteWindowsFonts
	fi
}

function installFontsFromZip() {
	local fontUrl="$1"
	local fontName="$2"
	if [ "$(uname)" = 'Darwin' ]; then
		mkdir -p ~/Library/Fonts || exit 2
		cd ~/Library/Fonts || exit 1
	else
		mkdir -p ~/.local/share/fonts || exit 2
		cd ~/.local/share/fonts || exit 1
	fi

	if [ ! -d "$fontName" ]; then
		rm -f "${TMPDIR:-/tmp}/$fontName.zip"
			curl -fLo "${TMPDIR:-/tmp}/$fontName.zip" "$fontUrl"
		unzip "${TMPDIR:-/tmp}/$fontName.zip" -d "$fontName"
		fontsAdded=1
		deleteWindowsFonts
	fi
}

function deleteWindowsFonts() {
	if [ "$(uname)" = 'Darwin' ]; then
		local DIR=~/Library/Fonts
	else
		local DIR=~/.local/share/fonts
	fi
	find $DIR -iname '*windows*' -exec rm -r "{}" \;
}

function installGtkTheme() {
	if [[ "$(uname -s)" == *"Linux"* ]]; then
		themeUrl="$1"
		themeName="$2"
		mkdir -p ~/.themes
		cd ~/.themes || exit 1
		if [ ! -d "$themeName" ]; then
			tmp_dir="$(mktemp -d)"
			rm -f "${TMPDIR:-/tmp}/$themeName.zip"
			curl -fLo "${TMPDIR:-/tmp}/$themeName.zip" "$themeUrl"
			cd "${tmp_dir}" || exit 2
			unzip "${TMPDIR:-/tmp}/$themeName.zip"
			mkdir -p "$HOME/.themes/$themeName"
			mv "${tmp_dir}"/*/** "$HOME/.themes/$themeName"
			rm -rf "${tmp_dir}"
		fi
	fi
}


function getJetbrainsPluginZipUrl() {
	local pluginName="$1"
	local pluginBaseUrl="https://plugins.jetbrains.com/"
	local requestUrl="${pluginBaseUrl}/plugin/${pluginName}"

	local newUrl=$(curl "${requestUrl}" | grep -E -o '/plugin/download\?updateId=[0-9]+')

	echo "${pluginBaseUrl}${newUrl}"
}

function getJetbrainsPluginPaths() {
	local productName="$1"

	find ~ -type d -name 'plugins' 2>/dev/null | grep -i "\.local.*${productName}"
}


function installJetbrainsPlugin() {
	set -x
	product="$1"
	zipUrl="$2"
	zipUrl=$(getJetbrainsPluginZipUrl "${zipUrl}")

	pluginDirs=$(getJetbrainsPluginPaths "${product}")

	echo "plugindirs: ${pluginDirs}"

	tmpZipFileName="${TMPDIR:-/tmp}/jetbrainsPlugin.zip"
	curl -L -o "${tmpZipFileName}" "${zipUrl}"

	echo "after wget"
	echo "${pluginDirs[@]}"
	for pluginDir in ${pluginDirs}
	do
		echo "plugindir: ${pluginDir}"
		cd "${pluginDir}" || return
		unzip "${tmpZipFileName}"
	done
	set +x
}

# make sure you pass absolute paths
# encrypt_files "$(find $(pwd) -name '*.jpg')" # $(pwd) makes sure it is absolute
encrypt_files() {
	files="$*"
	echo "Enter password:"
	read -s -r password
	echo "$files" | xargs -I {} sh -c "echo \"$password\" | gpg --passphrase-fd 0 --always-trust --compress-algo BZIP2 -z 9 --symmetric {}"
}

decrypt_if_necessary() {
	files="$1"
	unset password
	IFS=$'\n'
	echo "$files" | while read -r file; do
		original=$(echo "$file" | sed -E 's/\.gpg//g')
		if [ ! -f "$original" ]; then
			if [ ! "$password" ]; then
				echo "Enter password to decrypt GPG encrypted files"
				read -s -r password</dev/tty
			fi
			echo "$password" | gpg --passphrase-fd 0 -d -o "$original" "$file"
		fi
	done
	unset password
}


remove_wine_desktop_files() {
	find "$HOME/.local/share/applications/" | sort \
		| grep wine-extension \
		| grep -v application.desktop \
		| grep -v appref-ms \
		| grep -v vbs \
		| grep -v msp \
		| grep -v hlp \
		| grep -v url \
		| xargs -I {} rm {}
}

create_remmina_desktop_files() {
	rm ~/.local/share/applications/remmina-connection-* 2>/dev/null
	if [ ! -d ~/.remmina ]; then
		return
	fi
	find ~/.remmina -type f -name '*.remmina' | while read -r file; do
		name="$(grep '^name=' "$file" | cut -d'=' -f2)"
		name_formatted=$(echo "$name" | sed -E 's/[^a-zA-Z0-9]/_/g')
		cat <<EOL | tee ~/.local/share/applications/remmina-connection-"$name_formatted".desktop >/dev/null
[Desktop Entry]
Name=Remmina - $name
Exec=remmina -c $file
Icon=remmina
Type=Application
Categories=GTK;GNOME;X-GNOME-NetworkSettings;Network;
EOL
	done
}

create_vm() {
	local type="$1"
	local name="$2"
	local force="$3"

	if vboxmanage showvminfo "$name" &>/dev/null;then
		echo "VM with name '$name' is already imported!"
		return
	fi


	local TPATH=$(VBoxManage list systemproperties | sed -n 's/Default machine folder: *//p')
	if [ "$force" != 'force' ] && [ "$TPATH" = "$HOME/VirtualBox VMs" ]; then
		echo "Please change Virtualbox machine folder with:";
		# @see https://askubuntu.com/questions/800824/how-to-change-virtualbox-default-vm-location-in-command-line
		echo "vboxmanage setproperty machinefolder /path/to/directory/";
		echo -e "Current value:"
		VBoxManage list systemproperties | grep "Default machine folder:"
		return
	fi

	VBoxManage createvm --name "$name" --ostype "$type" --register
	if ! VBoxManage createvm --name "$name" --ostype "$type" --register; then
		echo "Possible os types:"
		VBoxManage list ostypes | grep '^ID'
		return
	fi


	echo "Creating harddisk..."
	disk_file="$TPATH/$name/$name.vmdk"
	VBoxManage createmedium disk --filename "$disk_file" --size 80000 --format VMDK --variant Split2G
	#VBoxManage internalcommands sethduuid "$disk_file"

	VBoxManage storagectl "$name" --name "SATA Controller" --add sata --controller IntelAHCI --portcount 1 --hostiocache off
	VBoxManage storageattach "$name" --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium "$disk_file"

	VBoxManage storagectl "$name" --name "IDE Controller" --add ide
	VBoxManage storageattach "$name" --storagectl "IDE Controller" --type dvddrive --medium emptydrive	--port 0 --device 0
	VBoxManage modifyvm "$name" --accelerate3d on --usb on --vram 256 --memory 2048 --clipboard bidirectional --draganddrop bidirectional
	VBoxManage modifyvm "$name" --boot1 dvd --boot2 disk
	VBoxManage modifyvm "$name" --ioapic on --cpus 2 --cpuexecutioncap 80
	# $ VBoxManage modifyvm $VM --nic1 bridged --bridgeadapter1 e1000g0
}

function show_all_available_icons() {
	 find ~/.local/share/icons/ /usr/share/icons -name '*.png' | sed -E 's/[0-9]+x[0-9]+\///g' | sed -E 's/scalable\///g' | sed -E 's/.*\///g' | sort -h | uniq
}

get_font_file() {
	# hack.*complete.*mono.*regular
	fc-list | grep -i "$1" | sed 's/:.*//g' | tail -1
}


# create_swap_file 4 /swapfile
# echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
create_swap_file() {
	local size_in_gb="$1"
	if [ ! "$1" ]; then
		echo "Please provide anmount of GBs for the swapfile as first parameter"
		exit 2
	fi

	local file="$2"
	if [ -f "$file" ]; then
		echo "File '$file' already exists!"
		exit 3
	fi

	# shellcheck disable=SC2003,SC2046,SC2086
	sudo dd if=/dev/zero of="$file" bs=1024 count=$(expr 1024 \* 1024 \* $size_in_gb)
	sudo chown root:root "$file"
	sudo chmod 0600 "$file"
	sudo mkswap "$file"
	sudo swapon "$file"
	echo "$file none swap sw 0 0" | sudo tee -a /etc/fstab
}

add-to-file() {
	touch "$2"
	grep -q -F "$1" "$2" || echo "$1" | tee -a "$2"
}

bi () {
	if [ "$(hostname)" != "arch-mini-pc" ]; then
		ssh -T 192.168.10.120 'bi' "$1"
	fi

	local folder="$1"
	if beet import "$folder"; then
		count=$(find "$folder" -name '*.flac' -o -name '*.mp3' | wc -l)

		if [[ $count -eq 0 ]]; then
			echo "Removing '$folder'"
			rm -rf "$folder"
		fi
	fi
}



import_music() {
		rsync -ah --info progress2 "$1" 192.168.10.120:/tank/media/music/to_import

		# shellcheck disable=SC2087
		ssh -T 192.168.10.120 /usr/bin/bash <<EOF
source ~/.functions
bi "/tank/media/music/to_import/$1"
EOF
}


xresources-colors() {
		counter=1
		while [ $counter -le 16 ]
		do
				val=$(printf '%03d\n' $counter)
				print -P "%{\$FG[$val]%}COLOR$counter%{\$reset_color%}"
				((counter++))
		done
}

move-to-dotfiles() {
		source="$1"

		home=$(echo "$HOME" | sed -e 's/[\/&]/\\&/g');
		source=$(echo "$1" | sed -E "s/$home\/?//g")
		target="$HOME/dotfiles/$source"

		if [ -f "$target" ] || [ -d "$target" ]; then
				echo "Target '$target' already exists, aborting"
				return
		fi

		echo "Moving '$1' to '$target'"

		cp -r "$HOME/$1" "$target"
		result=$?
		if [ $result -eq 0 ]; then
				rm -rf "$1"
				ln -s "$target" "$1"

				echo "Add the following to link.sh:	link-file \"\$DIR\" '$source'"

		fi
}


remove-from-dotfiles() {
		source="$1"

		home=$(echo "$HOME" | sed -e 's/[\/&]/\\&/g');
		source=$(echo "$1" | sed -E "s/$home\/?//g")
		source="$HOME/dotfiles/$source"
		target="$1"

		echo "target $target"
		echo "source $source"

		echo "Moving '$source' to '$target'"

		# Remove link first
		rm -rf "$target"
		cp -r "$source" "$target"
		result=$?
		if [ $result -eq 0 ]; then
				rm -rf "$source"
				echo "Do not forget to remove the correct record in link.sh for 'link-file'"

		fi
}


link-file() {
		dir="$1"
		# file relative to root folder
		arg="$2"
		source="${dir}/$arg"
		target="${HOME}/$arg"

		# Optional third argument to override the targer
		if [[ $# -eq 3 ]]; then
				target="$3"
		fi

		if [[ $arg = '' ]]; then
				echo "You need to provide source folder as first parameter"
				return 1
		fi

		if [ ! -f "$source" ] && [ ! -d "$source" ]; then
				echo "File or folder '$source' ($target) does not exist!"
				return 2
		fi

		rm -rf "$target"
		ln -sf "$source" "$target"
}

install-service() {
		file="$1"
		service_name="$(echo "$file" | sed -E 's#.*/([^/]+).service#\1#p' | head -1)"
		cp "$file" /etc/systemd/system/
		systemctl daemon-reload
		systemctl enable "$service_name"
		systemctl start "$service_name"
}


xdg-all-apps() {
		LOCAL="${XDG_DATA_HOME:-$HOME/.local/share}/applications/mimeinfo.cache"
		GLOBAL="/usr/share/applications/mimeinfo.cache"

		MATCHING="$(grep -h "$1" "$LOCAL" "$GLOBAL")"
		if [ -z "$MATCHING" ]; then
				echo "There are no application associated with $1"
				return
		fi
		echo "$MATCHING" | cut -d = -f 2 | \
				sed -z -e 's:\n::;s:;:\n:g' | \
				sort | uniq
}

function set_wm_name() {
	xprop -f WM_NAME 8s -set WM_NAME "Alacritty - $1"
	xprop -f _NET_WM_NAME 8s -set _NET_WM_NAME "Alacritty - $1"
	tmux rename-session "$1"
}

function set_term_colors() {
		# echo -en "\e]P01a1b21" #black
		# echo -en "\e]P1ff1835" #darkred
		# echo -en "\e]P231ff7f" #darkgreen
		# echo -en "\e]P3f3ff4d" #brown
		echo -en "\e]P439c2ed" #darkblue
		# echo -en "\e]P5ff68d1" #darkmagenta
		# echo -en "\e]P6169375" #darkcyan
		# echo -en "\e]P7dbdbdb" #lightgrey
		# echo -en "\e]P8959498" #darkgrey
		# echo -en "\e]P9ff1835" #red
		# echo -en "\e]PA31ff7f" #green
		# echo -en "\e]PBf3ff4d" #yellow
		echo -en "\e]PC39c2ed" #blue
		# echo -en "\e]PDff68d1" #magenta
		# echo -en "\e]PE169375" #cyan
		# echo -en "\e]PFffffff" #white

		clear #for background artifacting
}


function install_deb_from_url() {
	local url="$1"
	local tmp="$(mktemp)"
	curl -L "$url" >> "$tmp"
	sudo dpkg -i "$tmp"
	sudo apt install -f -y -qq
}


function add_repo_or_install_deb() {
	local repo="$1"
	local package_name="$2"
	local optional_deb="$3"

	if ! which "$package_name" &>/dev/null; then
		sudo add-apt-repository "$repo" -y
		sudo apt-get update -y -qq
		sudo apt install -y -qq "$package_name"
	fi

	# still no package?? remove repo and install deb
	if ! which "$package_name" &>/dev/null; then
		sudo add-apt-repository --remove "$repo" -y
		if [[ $optional_deb != '' ]]; then
			_install_deb_from_url "$optional_deb"
			sudo apt install -f -y -qq
		fi
	fi
}



function enable-proxy() {
	read -d '' content <<-EOF
		{
		"default":
			{
				"httpProxy": "http://$IP_ADDRESS:3128",
				"httpsProxy": "http://$IP_ADDRESS:3128",
				"noProxy": "localhost,127.0.0.1"
			}
		}
	EOF

	if [[ -d ~/src/dockerfiles ]]; then
		$(cd ~/src/dockerfiles; docker-compose up -d squid-cache)
	fi
	json -I -f ~/.docker/config.json -e "this.proxies=$content"

	export HTTPS_PROXY=http://$IP_ADDRESS:3128
	export https_proxy=http://$IP_ADDRESS:3128
	export HTTP_PROXY=http://$IP_ADDRESS:3128
	export http_proxy=http://$IP_ADDRESS:3128

	sudo ufw allow 3128/tcp
}

function disable-proxy() {
	unset HTTPS_PROXY
	unset https_proxy
	unset HTTP_PROXY
	unset http_proxy


	if [[ -d ~/src/dockerfiles ]]; then
		$(cd ~/src/dockerfiles; docker-compose stop squid-cache)
	fi
	json -I -f ~/.docker/config.json -e "this.proxies={}"
	sudo ufw deny 3128/tcp
}

# function expressvpn() {
# 	# shellcheck disable=2068
# 	sudo $(which expressvpn-mandy) $@
# }

function run-sourcegraph() {
	docker run -d --publish 7080:7080 \
		--publish 2633:2633 \
		--publish 127.0.0.1:3370:3370 \
		--rm --volume ~/.sourcegraph/config:/etc/sourcegraph \
		--volume ~/.sourcegraph/data:/var/opt/sourcegraph \
		sourcegraph/server:3.10.4
}

function set_autostart_hidden() {
	LINE='Hidden='
	FILE="$HOME/.config/autostart/$1"
	if [[ -f $FILE ]]; then
		grep -qF -- "$LINE" "$FILE" || echo "$LINE$2" >> "$FILE"
		sed -Ei "s#Hidden=.*#Hidden=$2#g" "$FILE"
	fi
}

function is_ubuntu() {
	[[ $(lsb_release -s -i 2>/dev/null) = 'Ubuntu' ]]
}

function is_android() {
	#pidof com.android.phone &>/dev/null
	[[ $(uname -o) = 'Android' ]]
}

function is_linux() {
	[[ $(uname) = 'Linux' ]]
}

function is_mac() {
	[[ $(uname) = 'Darwin' ]]
}

if test -n "$BASH" ; then __this_script=$BASH_SOURCE
elif test -n "$TMOUT"; then __this_script=${.sh.file}
elif test -n "$ZSH_NAME" ; then __this_script=${(%):-%x}
elif test ${0##*/} = dash; then x=$(lsof -p $$ -Fn0 | tail -1); __this_script=${x#n}
else __this_script="$0"
fi

if [[ -L $__this_script ]]; then
__this_script="$(readlink "$__this_script")"
# if is_android ; then
	_home_dir() {
		local DIR="$( cd "$( dirname "$__this_script}" )" && pwd )"
		source "$DIR/profile.d/homedir-path.sh"
	}
	_home_dir
	unset _home_dir
	
# fi
fi


alias polybar=/snap/polybar-git/current/usr/local/bin/polybar