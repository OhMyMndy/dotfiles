#!/usr/bin/env bash

# Based on https://gist.github.com/vshymanskyy/a44ff7af2848653e91f269910cb9d50f

adb_args=""

function connect() {
	devices="$(adb devices | sed -n '1!p' | grep -Eo '[a-zA-Z0-9.:]+' | grep -v device | tr '\n' '|' | sed 's/.$//')"
	if [[ $devices != *"|"* ]]; then
		adb_args="-s $devices"
		return
	fi
	chosen_device="$(zenity --forms --title "More than one device found" --text "Choose your device" --add-combo "Device" --combo-values $devices)"
	if [[ $chosen_device != '' ]]; then
		adb_args="-s $chosen_device"
	else
		ip_address="$(zenity --entry --text="Enter the IP address you want to connect to")"
		result="$(adb connect "$ip_address")"
		if [[ $result = *"unable to connect"* ]]; then
			zenity --error --text "ADB connect: '$result'" --no-wrap
			exit 3
		fi
	fi
}

function run() {
	set +e
	output=$("$@" 2>&1)

	return_code=$?
	if [[ $return_code -ne 0 ]];
	then
		zenity --entry --text="Command\"$*\":\n$output\nWould you like to continue?"
		return_code=$?
		if [[ $return_code -ne 0 ]]; then
			return 1
			exit
		fi

	fi
	echo "$output"
	set -e
}

# https://unix.stackexchange.com/questions/65751/how-to-get-functions-propagated-to-subshell
# shellcheck disable=SC2034
typeset -fx run


scrcpy_short_opts=$(scrcpy --help 2>&1 | grep -Eo "\s\-[a-zA-Z]" | sed -E 's#-| ##g' | tr -d '\n')
scrcpy_short_opts_with_argument=$(scrcpy --help 2>&1 | grep -E "\s\-[a-zA-Z], \-\-[a-zA-Z0-9:-]+ [a-zA-Z0-9.:-]+" | grep -Eo "\s\-[a-zA-Z]" | sed -E 's#-| ##g' | tr -d '\n')

# @todo
#scrcpy_long_opts_without_value=$(scrcpy --help 2>&1 | grep -Eo "\s\-[a-zA-Z]" | sed -E 's#-| ##g' | tr -d '\n')
getopt --long density:,font-scale:,null-keyboard,landscape,leena,disable-animations -- "$@" &>/dev/null


connect
echo "$adb_args" grep -Eo -m 1 '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' &>/dev/null
is_ip_device=$?

set -e

args=""
# extract options and their arguments into variables.
while true ; do
	# Skip all short opts from scrcpy
	if [[ "$scrcpy_short_opts" != *"${1//-/}"* ]];
	then
		case "$1" in
			--density) density=$2 ; shift 2;;
			--null-keyboard) null_keyboard=1; shift ;;
			--landscape) landscape=1; shift;;
			--leena) leena=1; shift;;
			--disable-animations) disable_animations=1; shift;;
			--font-scale) font_scale="$2"; shift 2;;
	        --) shift ; break ;;
	        *) echo "Unknown flag '$1'"; exit 2; break ;;
	    esac
		continue

	fi
	if [[ "$scrcpy_short_opts_with_argument" = *"${1//-/}"* ]];
	then
		if [[ $is_ip_device -eq 0 ]] && [[ $1 = '-b' ]]; then
			echo "Detecting ADB over tcpip -> Setting bitrate to 2M"
			args="$args $1 2M --max-fps 10"
		else
			args="$args $1 $2"
		fi

		if [[ $# -ne 0 ]]; then
			shift
		fi
	else
		args="$args $1"
	fi

	if [[ $# -eq 0 ]]; then
		break
	fi
	shift
done


original_ime="$(run adb $adb_args shell settings get secure default_input_method)"

original_wm_density="$(run adb $adb_args shell wm density | tail -1 | grep -Eo '[0-9]+')"
original_font_scale="$(run adb $adb_args shell settings get system font_scale)"
original_user_rotation="$(run adb $adb_args shell settings get system user_rotation)"
original_accelerometer_rotation="$(run adb $adb_args shell settings get system accelerometer_rotation)"

original_transition_animation_scale="$(run adb $adb_args shell settings get global transition_animation_scale)"
original_window_animation_scale="$(run adb $adb_args shell settings get global transition_animation_scale)"
original_animator_duration_scale="$(run adb $adb_args shell settings get global animator_duration_scale)"

function setup() {
	# Disable Keyboard
	if [[ -v null_keyboard ]]; then run adb $adb_args shell ime set com.wparam.nullkeyboard/.NullKeyboard; fi
	if [[ -v density ]]; then run adb $adb_args shell wm density "$density"; fi
	if [[ -v landscape ]]; then
		run adb $adb_args shell settings put system user_rotation 3
		run adb $adb_args shell settings put system accelerometer_rotation 0
	fi
	if [[ -v leena ]]; then run adb $adb_args shell monkey -p de.m_lang.leena 1; fi
	if [[ -v font_scale ]]; then run adb $adb_args shell settings put system font_scale "$font_scale"; fi

	if [[ -v disable_animations ]]; then
		adb shell $adb_args settings put global window_animation_scale "0.0"
		adb shell $adb_args settings put global transition_animation_scale "0.0"
		adb shell $adb_args settings put global animator_duration_scale "0.0"
	fi
}

restored=0
function restore() {
	if [[ $restored -eq 0 ]];
	then
		restored=1
		echo
		adb $adb_args shell ime set "$original_ime"
		adb $adb_args shell wm density "$original_wm_density"

		if [[ -v leena ]]; then adb shell am force-stop de.m_lang.leena; fi
		adb $adb_args shell settings put system user_rotation "$original_user_rotation"
		adb $adb_args shell settings put system accelerometer_rotation "$original_accelerometer_rotation"
		adb $adb_args shell settings put system font_scale "$original_font_scale"

		adb $adb_args shell settings put global window_animation_scale "$original_window_animation_scale"
		adb $adb_args shell settings put global transition_animation_scale "$original_transition_animation_scale"
		adb $adb_args shell settings put global animator_duration_scale "$original_animator_duration_scale"
	fi
}

trap restore  0 1 2 3 6 14 15

setup

echo "Args send to scrcpy: $args $adb_args"

# shellcheck disable=SC2086
scrcpy $args $adb_args
restore
