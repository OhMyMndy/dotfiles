---
version: 2
jobs:
  build:
    # machine: true
    docker:
      # - image: circleci/golang:1.12.12-buster
      - image: mandy91/dotfiles-build:0.1.1
    steps:
      - run:
          name: "Fix CIRCLE_WORKING_DIRECTORY"
          command: echo 'CIRCLE_WORKING_DIRECTORY="${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}"' >> $BASH_ENV

      - checkout
      - setup_remote_docker #:
          # docker_layer_caching: true # not available on my plan
      


      - run:
          name: Set up docker
          command: |
            # @see https://stackoverflow.com/questions/45796661/docker-permission-denied-while-trying-to-connect-to-docker-daemon-with-local-ci/45796662#45796662
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
              echo "export s=sudo" >> $BASH_ENV
              echo "export docker='sudo docker'" >> $BASH_ENV
            else
              echo "export s=" >> $BASH_ENV
              echo "export docker='docker'" >> $BASH_ENV
            fi

      - run:
          name: Verify docker
          command: $docker --version

      - run:
          name: Test Termux install script
          command: |
            set +e
            VOLUME_NAME=dotfile_source
     
            $docker stop ${VOLUME_NAME} &>/dev/null
            $docker rm ${VOLUME_NAME} &>/dev/null
            

            $docker create -v "${CIRCLE_WORKING_DIRECTORY}" --name $VOLUME_NAME alpine:3.4 /bin/true >/dev/null
            $docker cp ${CIRCLE_WORKING_DIRECTORY} ${VOLUME_NAME}:"$(dirname "${CIRCLE_WORKING_DIRECTORY}")" >/dev/null
            $docker run --rm --volumes-from ${VOLUME_NAME} --entrypoint sh xeffyr/termux:latest -c "set -x; echo githubusercontent.com >> /system/etc/static-dns-hosts.txt; /system/bin/update-static-dns >/dev/null 2>&1; apt-get update -qq; apt-get install -qq -y bash; bash ${CIRCLE_WORKING_DIRECTORY}/installers/auto.sh"
            return=$?

            $docker stop ${VOLUME_NAME} &>/dev/null
            $docker rm ${VOLUME_NAME} &>/dev/null

            exit 0
            #exit $?
      - run:
          name: Shellcheck
          # when: always
          command: |
            set +e

            exit 0

            failed=0
            # git ls-files | xargs -r -i bash -c "file \"{}\" | grep -iq Bourne-Again && echo \"{}\"" | xargs -r -i shellcheck -e SC1071,SC1008 -Calways -x "{}" -P "$(dirname "{}}")" | less
            #
            while read -r file; dos
              if ! shellcheck -x "$file" -P "$(dirname "$file")"; then
                failed=1
              fi
            done <<<$(git ls-files | xargs -r -i bash -c "file \"{}\" | grep -iq Bourne-Again && echo \"{}\"")
            exit $failed


      - run:
          name: Hadolint
          # when: always
          command: |
            set +e
            failed=0
            while read -r file; do
              if ! hadolint "$file"; then
                failed=1
              fi
            done <<<$(git ls-files -- 'Dockerfile')
            exit $failed
      - run:
          name: Validate Yaml files
          # when: always
          command: |
            set +e
            failed=0

            while read -r file; do
              if ! yamllint -s -d "line-length: {max: 80, allow-non-breakable-words: true}" "$file"; then
                failed=1
              fi
            done <<<$(git ls-files -- '*.yaml' '*.yml')
            exit $failed

      - run:
          name: Run tests
          command: |
            set +e
            VOLUME_NAME=ubuntu_test
     
            $docker stop ${VOLUME_NAME} &>/dev/null
            $docker rm ${VOLUME_NAME} &>/dev/null
            
            $docker cp ${CIRCLE_WORKING_DIRECTORY} ${VOLUME_NAME}:"$(dirname "${CIRCLE_WORKING_DIRECTORY}")" >/dev/null
            $docker run --rm --volumes-from ${VOLUME_NAME} --entrypoint sh ubuntu:18.04 -c "bats ${CIRCLE_WORKING_DIRECTORY}/tests/installers/ubuntu.bats"
            return=$?

            $docker stop ${VOLUME_NAME} &>/dev/null
            $docker rm ${VOLUME_NAME} &>/dev/null

            exit 0
            #exit $?

      - run:
          name: Validate Desktop files
          # when: always
          command: |
            set +e
            failed=0
            # @see https://specifications.freedesktop.org/menu-spec/latest/apa.html
            while read -r file; do
              if ! desktop-file-validate "$file"; then
                failed=1
              fi
            done <<<$(git ls-files -- '*.desktop')
            exit $failed

      - run:
          name: Markdownlint
          # when: always
          command: |
            set +e
            failed=0
            while read -r file; do
              if ! markdownlint "$file"; then
                failed=1
              fi
            done <<<$(git ls-files -- '*.md')
            exit $failed

      - run:
          name: Vint
          # when: always
          command: |
            set +e
            failed=0
            while read -r file; do
              if ! vint "$file"; then
                failed=1
              fi
            done <<<$(git ls-files -- '.vimrc' '*.vim')
            exit $failed